/*

WD1793 Floppy Disk controller emulation

Copyright ©2017 Juan Carlos González Amestoy

(Adaptation to ESPectrum / Betadisk (C) 2025 Víctor Iborra [Eremus])

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

#ifndef __rvmWD1793
#define __rvmWD1793

#include <stdio.h>
#include <inttypes.h>
#include <fcntl.h>
#include <string>
#include <cstring>
#include "ff.h"

#define kRVMwdDiskControlRead 0x000
#define kRVMwdDiskControlSeekUp 0x100
#define kRVMwdDiskControlSeekDown 0x300
#define kRVMwdDiskControlWrite 0x400

#define kRVMwdDiskOutStepping 0x40
#define kRVMwdDiskOutTrack0 0x80
#define kRVMwdDiskOutIndex 0x20

#define TRACKHEADER 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                         \
                    0xc2, 0xc2, 0xc2, 0xfc,                                                                         \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                    0x4e, 0x4e
#define SECTORHEADER_PRE 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0xa1, 0xa1, 0xfe, 0x00, 0x00
#define SECTORHEADER_POST 0x01, 0x00, 0x00, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                          0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e
#define SECTORDATA_PRE 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0xa1, 0xa1, 0xfb
#define SECTORDATA 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
                   0x00, 0x00 // Sector Data CRC
#define SECTORDATA_POST 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                        0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                        0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                        0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                        0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e

#define TRACK_POST 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, \
                   0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e

const uint8_t System34_track[] = {
    // Track 0, Side 0
    TRACKHEADER,
    // Sector 1
    SECTORHEADER_PRE, 0x01, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 2
    SECTORHEADER_PRE, 0x02, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 3
    SECTORHEADER_PRE, 0x03, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 4
    SECTORHEADER_PRE, 0x04, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 5
    SECTORHEADER_PRE, 0x05, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 6
    SECTORHEADER_PRE, 0x06, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 7
    SECTORHEADER_PRE, 0x07, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 8
    SECTORHEADER_PRE, 0x08, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 9
    SECTORHEADER_PRE, 0x09, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 10
    SECTORHEADER_PRE, 0x0a, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 11
    SECTORHEADER_PRE, 0x0b, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 12
    SECTORHEADER_PRE, 0x0c, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 13
    SECTORHEADER_PRE, 0x0d, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 14
    SECTORHEADER_PRE, 0x0e, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 15
    SECTORHEADER_PRE, 0x0f, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    // Sector 16
    SECTORHEADER_PRE, 0x10, SECTORHEADER_POST, SECTORDATA_PRE, SECTORDATA, SECTORDATA_POST,
    TRACK_POST};

typedef struct
{
    uint16_t tracks;
    uint8_t sides;
    uint8_t a, s;
    uint32_t t;            // trackIndex
    uint32_t indx;         // index
    uint32_t indexDelay;   // index delay
    uint32_t writeprotect; // Write Protect
    uint8_t cursectbuf[0x100];
    uint16_t cursectbufpos;
    FIL *Diskfile;
    BYTE *Filedata;
    std::string fname;
    bool IsSCLFile;
    int sclDataOffset;
    int t0s1_info;
} rvmwdDisk;

#define kRVMWD177XCLK 0x1  // 0- 1 mhz, 1- 2mhz
#define kRVMWD177XDDEN 0x2 // 0- FM, 1- MFM
#define kRVMWD177XTest 0x4

#define kRVMWD177XRateSelect kRVMWD177XCLK | kRVMWD177XDDEN | kRVMWD177XTest

#define kRVMWD177XHLD 0x8  // HEAD LOAD -> Signal HLD commands the drive to load the read/write heads
#define kRVMWD177XHLT 0x10 // HEAD LOAD TIMING -> Signal HLT informs the controller chip that the head has been properly loaded and to commence read or write operations.
#define kRVMWD177XINTRQ 0x20
#define kRVMWD177XDire 0x40
#define kRVMWD177XWriting 0x80
#define kRVMWD177XDRQ 0x100
#define kRVMWD177XCommandType 0x200
#define kRVMWD177XFINTRQ 0x400
#define kRVMWD177XONE 0x800
#define kRVMWD177XPower0 0x1000
#define kRVMWD177XPower1 0x2000
#define kRVMWD177XPower2 0x4000
#define kRVMWD177XPower3 0x8000
#define kRVMWD177XNotToReady 0x10000
#define kRVMWD177XReadyToNot 0x20000
#define kRVMWD177XIndexPulse 0x40000
#define kRVMWD177XInmediate 0x80000

// States (Step)
#define kRVMWD177XStepIdle 0x0
#define kRVMWD177XStepWaiting 0x1
#define kRVMWD177XStepWaitingMark 0x2
#define kRVMWD177XStepReadByte 0x3
#define kRVMWD177XStepWriteByte 0x4
#define kRVMWD177XStepLastWriteByte 0x5
#define kRVMWD177XStepWaitIndex 0x6
#define kRVMWD177XStepWriteRaw 0x7

// States
#define kRVMWD177XNone 0x0
#define kRVMWD177XSettingHeader 0x1
#define kRVMWD177XSettingEnd 0x2
#define kRVMWD177XTypeI0 0x3
#define kRVMWD177XTypeI1 0x4
#define kRVMWD177XTypeICheck 0x5
#define kRVMWD177XTypeIUpdate 0x6
#define kRVMWD177XTypeISeek 0x7
#define kRVMWD177XTypeIEnd 0x8
#define kRVMWD177XReadHeader 0x9
#define kRVMWD177XTypeIHeaderReaded 0xA
#define kRVMWD177XReadHeaderBytes 0xB
#define kRVMWD177XReadCRC 0xC
#define kRVMWD177XTypeIHeadSet 0xD
#define kRVMWD177XTypeIISetHead 0xE
#define kRVMWD177XTypeIICommand 0xF
#define kRVMWD177XReadDataFlag 0x10
#define kRVMWD177XReadDataFlag2 0x11
#define kRVMWD177XReadData 0x12
#define kRVMWD177XReadSectorHeader 0x13
#define kRVMWD177XReadAddressWait 0x14
#define kRVMWD177XReadAddressBytes 0x15
#define kRVMWD177XWriteDataFlag 0x16
#define kRVMWD177XWriteData 0x17
#define kRVMWD177XWriteCRC1 0x18
#define kRVMWD177XWriteCRC2 0x19
#define kRVMWD177XWriteEnd 0x1A
#define kRVMWD177XWriteLast 0x1B
#define kRVMWD177XReadAddressDataFlag 0x1C
#define kRVMWD177XWriteTrack 0x1D
#define kRVMWD177XWriteTrackCRC 0x1E
#define kRVMWD177XWriteTrackStart 0x1F
#define kRVMWD177XReadTrackStart 0x20
#define kRVMWD177XReadTrackData 0x21

#define kRVMWD177XSettingHeaderTime 3750

// Status Codes

#define kRVMWD177XStatusBusy 0x1
#define kRVMWD177XStatusIndex 0x2
#define kRVMWD177XStatusTrack0 0x4
#define kRVMWD177XStatusCRC 0x8
#define kRVMWD177XStatusSeek 0x10
#define kRVMWD177XStatusHeadLoaded 0x20
#define kRVMWD177XStatusProtected 0x40
#define kRVMWD177XStatusNotReady 0x80

#define kRVMWD177XStatusDataRequest 0x2
#define kRVMWD177XStatusLostData 0x4
#define kRVMWD177XStatusRecordNotFound 0x10
#define kRVMWD177XStatusRecordType 0x20
#define kRVMWD177XStatusWriteFault 0x20

#define kRVMWD177XStatusSetWP 0x100
#define kRVMWD177XStatusSetTrack0 0x200
#define kRVMWD177XStatusSetIndex 0x400
#define kRVMWD177XStatusSetHead 0x800

// Command bits
#define kRVMWD177XHeadBit 0x8
#define kRVMWD177XUpdateBit 0x10
#define kRVMWD177XVerifyBit 0x4
#define kRVMWD177XStepInOut 0x40
#define kRVMWD177XTypeI 0x80

#define WD177XSTEPSTATES 112 // 112 states -> 14 states per bit

typedef struct
{
    uint32_t state, stepState, next;
    uint32_t control;
    uint32_t c;

    uint8_t command;
    uint8_t track;
    uint8_t sector;
    uint8_t data, dsr;
    uint16_t status;

    uint8_t header[7];
    uint8_t headerI;

    uint8_t diskS; // Disk selected
    uint8_t diskP; // Disk previous

    uint8_t retry;

    uint64_t marka;
    uint8_t a, e, wb;

    uint16_t crc, aa;
    uint8_t side;

    rvmwdDisk *disk[4];

    bool fastmode;

    bool sclConverted;
    unsigned char Track0[2304]; // Store SCL translated track0

    int wtrackmark, wtracksector;

    uint8_t led;

} rvmWD1793;

void _do(rvmWD1793 *wd);
void rvmWD1793Write(rvmWD1793 *wd, uint8_t a, uint8_t v);
uint8_t rvmWD1793Read(rvmWD1793 *wd, uint8_t a);
void rvmWD1793Step(rvmWD1793 *wd, uint32_t steps);
void rvmWD1793Reset(rvmWD1793 *wd);
bool rvmWD1793InsertDisk(rvmWD1793 *wd, unsigned char UnitNum, std::string Filename);
uint8_t rvmwdDiskStep(rvmWD1793 *wd, uint32_t control);
void wdDiskEject(rvmWD1793 *wd, unsigned char UnitNum);
void SCLtoTRD(rvmwdDisk *d, unsigned char *track0);

BYTE* load_file_into_ram(FIL* fp, UINT* filesize_out);

inline std::string rvmWD1793StepStateName(rvmWD1793 *wd)
{
    std::string st;
    switch(wd->stepState)
    {
        case kRVMWD177XStepIdle:
            st = "IDLE";
            break;
        case kRVMWD177XStepWaiting:
            st = "WAIT";
            break;
        case kRVMWD177XStepWaitingMark:
            st = "MARK";
            break;
        case kRVMWD177XStepReadByte:
            st = "RDBT";
            break;
        case kRVMWD177XStepWriteByte:
            st = "WRBT";
            break;
        case kRVMWD177XStepLastWriteByte:
            st = "WRBT";
            break;
        case kRVMWD177XStepWaitIndex:
            st = "WIND";
            break;
        case kRVMWD177XStepWriteRaw:
            st = "WRAW";
            break;
        default:
            st = "NONE";
            break;
    }
    return st;
}

#endif